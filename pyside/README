
STRUCTURE {#{{{
    
    bin/
        - rungui.py
            Runs the GUI program.
        - make_ui.sh
            - Creates/updates the files in lib/gui/ based on .ui files found 
              in ui/   

    lib/gui/
        Auto-generated files containing the GUI elements.  Files in here 
        should not be edited by hand; the edits will be overwritten.

    lib/widgets/
        Custom modules that import the GUI elements in lib/gui/
}#}}}
CREATING A NEW GUI ELEMENT {#{{{

    - Each GUI element has three main files.  I'm using my ConfBox as an 
      example.
        - ui/confbox.ui
        - lib/gui/ui_confbox.py
        - lib/widgets/confbox.py

        - It's recommended that you open that .ui file in Qt Designer and the 
          two .py files in a text editor right now to better understand what 
          the rest of this note is talking about.

    - Design your element in Qt Designer.
        - Save the file into ui/FILENAME.ui

    - Add it to the build script
        - Edit bin/make_ui.sh.  Add your file to the FILE_PIECES array.
            - You're just adding the root of your filename.  So if the file 
              you just saved was "ui/myelement.ui", all you're adding to that 
              FILE_PIECES array will be "myelement".
        - Run bin/make_ui.sh to create lib/gui/ui_FILENAME.py

    - Update the gui package to add your new element
        - lib/gui/__init__.py
        - Follow existing examples

    - Create custom code for your design
        - Create lib/widgets/FILENAME.py
        - Your new file will need some specific imports
            from PySide.QtGui import QApplication, QT_CLASS

                - Most custom code will require QApplication, so adding that 
                  now is fine.
                - The QT_CLASS is the type of Qt window your element inherits 
                  from.  In QtDesigner, see the Object Inspector panel - 
                  you're looking for the "Class" of the toplevel object in a 
                  given design.
                    - eg for confbox.ui, the QT_CLASS you need to import is 
                      QDialog.

            from gui import Ui_CLASS
                - Ui_CLASS is the name of the class found in 
                  lib/gui/ui_FILENAME.py.  This classname is autogenerated, so 
                  don't get clever and rename it.

        - Create your class
            class MyClass( QT_CLASS, Ui_CLASS ):
                def __init__(self, parent=None):
                    super(MyClass, self).__init__(parent)
                    self.setupUi(self)

            - Your class will inherit from both of the classes we imported.  
              __init__ must call super on MyClass (obviously change this to 
              whatever you're calling your class), and then call setupUi().

            - At this point, the rest of your MyClass() will contain whatever 
              code you need it to.

    - Update the widgets package to add your new element
        - lib/widgets/__init__.py
        - Follow existing examples

    - At this point, your new widget should be ready to go.  You'll most 
      likely want to use it in lib/widgets/mainwindow.py -- see existing 
      examples for how to use widgets (search for "ConfBox")
    
}#}}}

