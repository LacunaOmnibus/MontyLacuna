
.. _getting_started_writing:

Getting Started Writing Scripts
===============================

Be sure to follow the :ref:`getting_started_running` section first.  This 
section assumes that you're already to the point of being able to run scripts.

Test Scripts
------------
There are a bunch of test scripts in ``INSTALLDIR/t/``.  These are not meant 
to be attached to any test harness, and almost all the code in those scripts 
has been commented out.

Instead of automated unit tests, those are to-be-run-manually test scripts.  
You can run them as you like, but you'll need to edit each one to make sense 
to you, and be careful; some of the example code in those scripts can be 
damaging to your empire.

Those scripts really exist as examples of how to use MontyLacuna.

Tell Your Script Where MontyLacuna Lives
----------------------------------------
When you create a new script, you'll need to tell that script how to find the 
MontyLacuna libraries.

Add this to the top of your script::

    import os, sys

<<<<<<< HEAD
    libdir = os.path.abspath(os.path.dirname(sys.argv[0])) + "/../lib"
=======
    libdir = os.path.abspath(os.path.dirname(__file__)) + "/../lib"
>>>>>>> 3cbbed38944967d03370d112bd890284020452e8
    sys.path.append(libdir)

    import lacuna

The path to the ``lib/`` directory is relative to the location of your script, 
and this example assumes your script is going to live in ``INSTALLDIR/bin/``.  
If you're going to put your script somewhere else, adjust the path 
accordingly.

Connect a client
----------------
::

    my_client = lacuna.clients.Member(
<<<<<<< HEAD
        config_file = os.path.abspath(os.path.dirname(sys.argv[0])) + 
        "/../etc/lacuna.cfg",
=======
        config_file = os.path.abspath(os.path.dirname(__file__)) + "/../etc/lacuna.cfg",
>>>>>>> 3cbbed38944967d03370d112bd890284020452e8
        config_section = 'sitter',
    )

As with the previous step, the path to the config file is relative to the 
location of your script.  Adjust the path accordingly if your script is going 
to live somewhere other than ``INSTALLDIR/bin/``.

Please keep in mind that many of the people using your script may not be very 
technically inclined.  The config file creation script that comes with 
MontyLacuna creates config file sections named ``real`` and ``sitter``; if 
your script is meant for distribution, it's strongly suggested that you 
specify one of those two names as your ``config_section``.

<<<<<<< HEAD
Logging and Caching
-------------------
    Logging and caching facilities are set up for use in your scripts, and are 
    both easy to access.  For details, see :ref:`logging` and :ref:`caching`.

=======
>>>>>>> 3cbbed38944967d03370d112bd890284020452e8
Example Snippets
----------------

Get your empire
~~~~~~~~~~~~~~~
Your empire object is already part of your client::

    print( "I have used", my_client.empire.rpc_count, "RPCs so far today.")

    profile = my_client.empire.view_profile()
    print( "I am from {} in {}, and my player name is {}.  I have won {} medals."
        .format(profile.city, profile.country, profile.player_name, len(profile.medals.keys()))
    )

Get info on your alliance
~~~~~~~~~~~~~~~~~~~~~~~~~
::

    my_alliance = my_client.get_my_alliance();
    print( "My alliance is named {}, and its ID is {}."
        .format(my_alliance.name, my_alliance.id)
    )

Read mail from your inbox
~~~~~~~~~~~~~~~~~~~~~~~~~
::

    mail = my_client.get_inbox();
    msgs, ttl = mail.view_inbox( {"tags": ["correspondence"]} )
    print( "I have ", ttl, "messages in my inbox.")

Check on one of your planets by name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

    my_planet = my_client.get_body_byname( 'Earth' )
    print( "Earth's ID is", my_planet.id )

Check on one of the buildings on that planet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

    pcc = my_planet.get_building_coords( 0, 0 )
    print( "My PCC's ID is", pcc.id )
    
Next Steps
~~~~~~~~~~
From here, check on some of the existing sample scripts in ``bin/``, and the 
full documentation in :ref:`home`
